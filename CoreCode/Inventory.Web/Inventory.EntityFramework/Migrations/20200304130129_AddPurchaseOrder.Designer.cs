// <auto-generated />
using System;
using Inventory.EntityFrameworkCore.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Inventory.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200304130129_AddPurchaseOrder")]
    partial class AddPurchaseOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<long>("TenantId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.AdditionalCharge", b =>
                {
                    b.Property<long>("AdditionalChargeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<long?>("TenantsId");

                    b.Property<string>("UnitPrice");

                    b.Property<string>("UnitPriceType");

                    b.HasKey("AdditionalChargeId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("AdditionalCharge");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.CreditTerms", b =>
                {
                    b.Property<long>("CreditTermId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Duration");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("CreditTermId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("CreditTerms");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.DiscountType", b =>
                {
                    b.Property<long>("DsicounttTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("DiscountName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("DsicounttTypeId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("discountTypes");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.Metric_Units", b =>
                {
                    b.Property<long>("Metric_UnitsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Metric_UnitsName");

                    b.Property<long>("Metric_UnitsType");

                    b.HasKey("Metric_UnitsId");

                    b.ToTable("Metric_Units");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.PaymentTerm", b =>
                {
                    b.Property<long>("PaymentTermId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<int>("Duration");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("PaymentTermId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.SalesOrderType", b =>
                {
                    b.Property<long>("SalesOrderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.Property<string>("TypeName");

                    b.HasKey("SalesOrderTypeId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("SalesOrderType");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.ShipmentMethod", b =>
                {
                    b.Property<long>("ShipmentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("ShipmentMethodId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("ShipmentMethods");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.ShipmentTerm", b =>
                {
                    b.Property<long>("ShipmentTermId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("ShipmentTermId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("ShipmentTerms");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.TaxCode", b =>
                {
                    b.Property<long>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("TaxId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("TaxCode");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.UOM", b =>
                {
                    b.Property<long>("UOMId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UOMName");

                    b.HasKey("UOMId");

                    b.ToTable("UOMs");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.Warehouse", b =>
                {
                    b.Property<long>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<long?>("TenantsId");

                    b.Property<long>("code");

                    b.HasKey("WarehouseId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Inventory.Core.Models.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<string>("CountryName");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("CountryId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("country");
                });

            modelBuilder.Entity("Inventory.Core.Models.Currency.Currency", b =>
                {
                    b.Property<long>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("CurrencyName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("CurrencyId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Inventory.Core.Models.Customer.Adderss", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("AddressType");

                    b.Property<string>("City");

                    b.Property<long?>("CountryId");

                    b.Property<long?>("CustomerId");

                    b.Property<bool>("DefaultAddress");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<long?>("SupplierId");

                    b.Property<long?>("TenantId");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TenantId");

                    b.ToTable("Addersses");
                });

            modelBuilder.Entity("Inventory.Core.Models.Customer.Contacts", b =>
                {
                    b.Property<long>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CountryId");

                    b.Property<long?>("CustomerId");

                    b.Property<bool>("DefaultContact");

                    b.Property<string>("Designation");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Mobile");

                    b.Property<string>("Office");

                    b.Property<long?>("SupplierId");

                    b.Property<long?>("TenantId");

                    b.HasKey("ContactId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TenantId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Inventory.Core.Models.Customer.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<long?>("CreditTermId");

                    b.Property<string>("CusromerCode");

                    b.Property<string>("CustomerName");

                    b.Property<long?>("CustomerTypeId");

                    b.Property<double>("DefaultCreditLimit");

                    b.Property<long?>("DefaultCurrency");

                    b.Property<double>("DiscountAmount");

                    b.Property<long?>("DiscountOption");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Remarks");

                    b.Property<string>("TaxRegistrationNumber");

                    b.Property<long?>("TenantsId");

                    b.Property<string>("Website");

                    b.HasKey("CustomerId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CreditTermId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("DefaultCurrency");

                    b.HasIndex("DiscountOption");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Inventory.Core.Models.Customer.CustomerType", b =>
                {
                    b.Property<long>("CustomerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("CustomerTypeName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("CustomerTypeId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("Inventory.Core.Models.Products.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BatchItem");

                    b.Property<long?>("BrandId");

                    b.Property<long?>("CategorieId");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsProductVariants");

                    b.Property<bool>("IsRawMaterail");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<string>("RawMaterial_points");

                    b.Property<bool>("SerialNumber");

                    b.Property<string>("Sku");

                    b.Property<bool>("Stockitem");

                    b.Property<bool>("Taxable");

                    b.Property<long?>("TenantsId");

                    b.HasKey("ProductId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Inventory.Core.Models.Products.ProductBrand", b =>
                {
                    b.Property<long>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("BrandId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("Inventory.Core.Models.Products.ProductCategories", b =>
                {
                    b.Property<long>("CategoriesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoriesName");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayOrder");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("CategoriesId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantsId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Inventory.Core.Models.Products.ProductService", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long>("MinmOrderQuantity");

                    b.Property<string>("Name");

                    b.Property<double>("PurchasePrice");

                    b.Property<string>("SKU");

                    b.Property<double>("SellingPrice");

                    b.Property<long>("TaxId");

                    b.Property<bool>("Taxble");

                    b.Property<long?>("TenantsId");

                    b.HasKey("ServiceId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TaxId");

                    b.HasIndex("TenantsId");

                    b.ToTable("ProductService");
                });

            modelBuilder.Entity("Inventory.Core.Models.Products.ProductVariant", b =>
                {
                    b.Property<long>("ProductVariantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("DefaultSupplierId");

                    b.Property<int?>("DefaultTaxId");

                    b.Property<long?>("DefaultWarehouseId");

                    b.Property<string>("Image");

                    b.Property<double?>("InitialHandCost");

                    b.Property<double?>("InitialStockHand");

                    b.Property<double?>("InitialStockPrice");

                    b.Property<long?>("ProductId");

                    b.Property<double?>("PurchasePrice");

                    b.Property<long?>("ReorderQuantity");

                    b.Property<double?>("SellingPrice");

                    b.Property<string>("Sku");

                    b.Property<long?>("SupplierId");

                    b.Property<double?>("UnitsOfMeasurement");

                    b.Property<long?>("VariMinmOrderQuantity");

                    b.Property<string>("VariantDesc");

                    b.Property<string>("VariantOptionsType");

                    b.Property<string>("VariantOptionslabel");

                    b.Property<string>("Variantslabel");

                    b.Property<int?>("VariantslabelId");

                    b.Property<long?>("WarehouseId");

                    b.HasKey("ProductVariantId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("Inventory.Core.Models.PurchaseOrder.PurchaseOrderAdditionalChargeForAll", b =>
                {
                    b.Property<long>("AdditionalChargeForAllId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AdditionalChargeId");

                    b.Property<long?>("PurchaseOrdersId");

                    b.Property<long?>("TaxId");

                    b.HasKey("AdditionalChargeForAllId");

                    b.HasIndex("AdditionalChargeId");

                    b.HasIndex("PurchaseOrdersId");

                    b.HasIndex("TaxId");

                    b.ToTable("PurchaseOrderAdditionalChargeForAll");
                });

            modelBuilder.Entity("Inventory.Core.Models.PurchaseOrder.PurchaseOrderAdditionalChargeForProduct", b =>
                {
                    b.Property<long>("AdditionalChargeForProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AdditionalChargeId");

                    b.Property<bool?>("IsTaxble");

                    b.Property<long?>("ProductId");

                    b.Property<long?>("PurchaseOrdersId");

                    b.Property<long?>("TaxId");

                    b.HasKey("AdditionalChargeForProductId");

                    b.HasIndex("AdditionalChargeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrdersId");

                    b.HasIndex("TaxId");

                    b.ToTable("PurchaseOrderAdditionalChargeForProduct");
                });

            modelBuilder.Entity("Inventory.Core.Models.PurchaseOrder.PurchaseOrderDetails", b =>
                {
                    b.Property<long>("PurchaseOrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AdditionalChargeAmount");

                    b.Property<string>("AdditionalChargeType");

                    b.Property<double?>("FinalTaxTotal");

                    b.Property<double?>("FinalTotal");

                    b.Property<bool?>("IsAdditionalChargeApply");

                    b.Property<string>("IsAdditionalChargeApplyType");

                    b.Property<long?>("PurchaseOrdersId");

                    b.Property<bool?>("TaxInclude");

                    b.Property<double?>("Total");

                    b.Property<long?>("TotalQTY");

                    b.HasKey("PurchaseOrderDetailsId");

                    b.HasIndex("PurchaseOrdersId");

                    b.ToTable("PurchaseOrderDetails");
                });

            modelBuilder.Entity("Inventory.Core.Models.PurchaseOrder.PurchaseOrderItems", b =>
                {
                    b.Property<long>("OrderItemsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Discount");

                    b.Property<int?>("DiscountType");

                    b.Property<bool?>("IsTaxble");

                    b.Property<long?>("ProductId");

                    b.Property<long?>("PurchaseOrdersId");

                    b.Property<int?>("QTY");

                    b.Property<long?>("TaxId");

                    b.Property<double?>("TaxTotal");

                    b.Property<double?>("Total");

                    b.Property<int?>("Unit");

                    b.Property<double?>("UnitPrice");

                    b.HasKey("OrderItemsId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrdersId");

                    b.HasIndex("TaxId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("Inventory.Core.Models.PurchaseOrder.PurchaseOrders", b =>
                {
                    b.Property<long>("PurchaseOrdersId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<long?>("CreditTermId");

                    b.Property<long?>("CurrencyId");

                    b.Property<DateTime?>("DateOrdered");

                    b.Property<DateTime?>("EstimatedDeliveryDate");

                    b.Property<double?>("ExchangeRate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<int>("PaymentStatus");

                    b.Property<long>("PaymentTermId");

                    b.Property<string>("PurchaseOrderNumber");

                    b.Property<int>("ReceiveStatus");

                    b.Property<string>("ReferenceNumber");

                    b.Property<string>("Remarks");

                    b.Property<long?>("ShipmentMethodId");

                    b.Property<long>("SupplierId");

                    b.Property<long?>("TenantsId");

                    b.HasKey("PurchaseOrdersId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CreditTermId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("ShipmentMethodId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TenantsId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Inventory.Core.Models.RawMaterails", b =>
                {
                    b.Property<long>("RMId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternativeRMName");

                    b.Property<long?>("BrandId");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<decimal?>("ICostPrice");

                    b.Property<decimal?>("ID_CBM");

                    b.Property<decimal?>("ID_Height");

                    b.Property<decimal?>("ID_Width");

                    b.Property<decimal?>("ID_length");

                    b.Property<long?>("ID_metric_Units");

                    b.Property<decimal?>("ILandedCost");

                    b.Property<decimal?>("IStockOnHand");

                    b.Property<decimal?>("Inner_Weight");

                    b.Property<long?>("Inner_Weight_metric_Units");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Itemcode");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("Minimumu_Order_Quantity");

                    b.Property<decimal?>("OD_CBM");

                    b.Property<decimal?>("OD_Height");

                    b.Property<decimal?>("OD_Width");

                    b.Property<decimal?>("OD_length");

                    b.Property<long?>("OD_metric_Units");

                    b.Property<decimal?>("Outer_Weight");

                    b.Property<long?>("Outer_Weight_metric_Units");

                    b.Property<long?>("ProductCategorieId");

                    b.Property<decimal?>("Purchase_Price");

                    b.Property<string>("RMName");

                    b.Property<long?>("Reorder_Quantity");

                    b.Property<decimal?>("Selling_Price");

                    b.Property<bool>("StockItem");

                    b.Property<long?>("SupplierId");

                    b.Property<long?>("TaxCodeId");

                    b.Property<bool>("Taxable");

                    b.Property<long?>("TenantsId");

                    b.Property<long?>("UOMId");

                    b.Property<long?>("WarehouseId");

                    b.HasKey("RMId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("ID_metric_Units");

                    b.HasIndex("Inner_Weight_metric_Units");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("OD_metric_Units");

                    b.HasIndex("Outer_Weight_metric_Units");

                    b.HasIndex("ProductCategorieId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TaxCodeId");

                    b.HasIndex("TenantsId");

                    b.HasIndex("UOMId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("RawMaterails");
                });

            modelBuilder.Entity("Inventory.Core.Models.SalesOrder.SalesOrderAdditionalChargeForAll", b =>
                {
                    b.Property<long>("AdditionalChargeForAllId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AdditionalChargeId");

                    b.Property<long?>("SalesOrdersId");

                    b.Property<long?>("TaxId");

                    b.HasKey("AdditionalChargeForAllId");

                    b.HasIndex("AdditionalChargeId");

                    b.HasIndex("SalesOrdersId");

                    b.HasIndex("TaxId");

                    b.ToTable("SalesOrderAdditionalChargeForAll");
                });

            modelBuilder.Entity("Inventory.Core.Models.SalesOrder.SalesOrderAdditionalChargeForProduct", b =>
                {
                    b.Property<long>("AdditionalChargeForProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AdditionalChargeId");

                    b.Property<bool?>("IsTaxble");

                    b.Property<long?>("ProductId");

                    b.Property<long>("SalesOrdersId");

                    b.Property<long?>("TaxId");

                    b.HasKey("AdditionalChargeForProductId");

                    b.HasIndex("AdditionalChargeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrdersId");

                    b.HasIndex("TaxId");

                    b.ToTable("SalesOrderAdditionalChargeForProduct");
                });

            modelBuilder.Entity("Inventory.Core.Models.SalesOrder.SalesOrderDetails", b =>
                {
                    b.Property<long>("SalesOrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AdditionalChargeAmount");

                    b.Property<string>("AdditionalChargeType");

                    b.Property<double?>("FinalTaxTotal");

                    b.Property<double?>("FinalTotal");

                    b.Property<bool?>("IsAdditionalChargeApply");

                    b.Property<string>("IsAdditionalChargeApplyType");

                    b.Property<long>("SalesOrdersId");

                    b.Property<bool?>("TaxInclude");

                    b.Property<double?>("Total");

                    b.Property<long?>("TotalQTY");

                    b.HasKey("SalesOrderDetailsId");

                    b.HasIndex("SalesOrdersId");

                    b.ToTable("SalesOrderDetails");
                });

            modelBuilder.Entity("Inventory.Core.Models.SalesOrder.SalesOrderItems", b =>
                {
                    b.Property<long>("OrderItemsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Discount");

                    b.Property<int?>("DiscountType");

                    b.Property<bool?>("IsTaxble");

                    b.Property<long?>("ProductId");

                    b.Property<int?>("QTY");

                    b.Property<long?>("SalesOrdersId");

                    b.Property<long?>("TaxId");

                    b.Property<double?>("TaxTotal");

                    b.Property<double?>("Total");

                    b.Property<int?>("Unit");

                    b.Property<double?>("UnitPrice");

                    b.HasKey("OrderItemsId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrdersId");

                    b.HasIndex("TaxId");

                    b.ToTable("SalesOrderItems");
                });

            modelBuilder.Entity("Inventory.Core.Models.SalesOrder.SalesOrders", b =>
                {
                    b.Property<long>("SalesOrdersId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<long?>("CreditTermId");

                    b.Property<long?>("CurrencyId");

                    b.Property<long>("CustomerId");

                    b.Property<string>("CustomerPurchesOrderNumber");

                    b.Property<DateTime?>("DateOrdered");

                    b.Property<DateTime?>("EstimatedDeliveryDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<int>("PaymentStatus");

                    b.Property<string>("Remarks");

                    b.Property<string>("SalesOrderNumber");

                    b.Property<long?>("SalesOrderRepId");

                    b.Property<long?>("SalesOrderTypeId");

                    b.Property<long?>("ShipmentMethodId");

                    b.Property<int>("ShipmentStatus");

                    b.Property<long?>("TenantsId");

                    b.HasKey("SalesOrdersId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CreditTermId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SalesOrderTypeId");

                    b.HasIndex("ShipmentMethodId");

                    b.HasIndex("TenantsId");

                    b.ToTable("SalesOrders");
                });

            modelBuilder.Entity("Inventory.Core.Models.Supplier.Supplier", b =>
                {
                    b.Property<long>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<long?>("DefaultCurrency");

                    b.Property<long?>("DefaultPaymentTerms");

                    b.Property<long?>("DefaultTaxCode");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Remarks");

                    b.Property<long?>("Shipmenmethod");

                    b.Property<long?>("Shipmenterms");

                    b.Property<string>("SupplierCode");

                    b.Property<long?>("TenantsId");

                    b.Property<string>("Website");

                    b.HasKey("SupplierId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DefaultCurrency");

                    b.HasIndex("DefaultPaymentTerms");

                    b.HasIndex("DefaultTaxCode");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("Shipmenmethod");

                    b.HasIndex("Shipmenterms");

                    b.HasIndex("TenantsId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Inventory.Core.Models.Tenants.Tenants", b =>
                {
                    b.Property<long>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessRegisterNumber");

                    b.Property<DateTime?>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EmailId");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsInTrialPeriod");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Logo");

                    b.Property<DateTime?>("SubscriptionEndDateUtc");

                    b.Property<string>("TagRegisterNumber");

                    b.Property<string>("TenantName");

                    b.HasKey("TenantId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Inventory.Core.Models.UploadImage.UploadImage", b =>
                {
                    b.Property<long>("UploadImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<bool>("DefaultImage");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("ProductId");

                    b.Property<long?>("RawMaterailId");

                    b.Property<long?>("TenantsId");

                    b.Property<string>("UploadImageString");

                    b.HasKey("UploadImageId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("RawMaterailId");

                    b.HasIndex("TenantsId");

                    b.ToTable("UploadImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserLogin<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserToken<string>");
                });

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationRoleClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>");

                    b.Property<string>("RoleId1");

                    b.HasIndex("RoleId1");

                    b.HasDiscriminator().HasValue("ApplicationRoleClaim");
                });

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationUserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>");

                    b.Property<string>("UserId1");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserClaim");
                });

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationUserLogin", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>");

                    b.Property<string>("UserId1");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserLogin");
                });

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("RoleId1");

                    b.Property<string>("UserId1");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationUserToken", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>");

                    b.Property<string>("UserId1");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserToken");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.AdditionalCharge", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.CreditTerms", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.DiscountType", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.PaymentTerm", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.SalesOrderType", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.ShipmentMethod", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.ShipmentTerm", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.TaxCode", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Commons.Warehouse", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Country", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Currency.Currency", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Customer.Adderss", b =>
                {
                    b.HasOne("Inventory.Core.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Inventory.Core.Models.Customer.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Inventory.Core.Models.Supplier.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Customer.Contacts", b =>
                {
                    b.HasOne("Inventory.Core.Models.Country", "country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Inventory.Core.Models.Customer.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Inventory.Core.Models.Supplier.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Customer.Customer", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.Commons.CreditTerms", "creditTerms")
                        .WithMany()
                        .HasForeignKey("CreditTermId");

                    b.HasOne("Inventory.Core.Models.Customer.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId");

                    b.HasOne("Inventory.Core.Models.Currency.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("DefaultCurrency");

                    b.HasOne("Inventory.Core.Models.Commons.DiscountType", "discountType")
                        .WithMany()
                        .HasForeignKey("DiscountOption");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Customer.CustomerType", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Products.Product", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Products.ProductBrand", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Products.ProductCategories", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Products.ProductService", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Commons.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Products.ProductVariant", b =>
                {
                    b.HasOne("Inventory.Core.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Inventory.Core.Models.Supplier.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("Inventory.Core.Models.Commons.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Inventory.Core.Models.PurchaseOrder.PurchaseOrderAdditionalChargeForAll", b =>
                {
                    b.HasOne("Inventory.Core.Models.Commons.AdditionalCharge", "AdditionalCharge")
                        .WithMany()
                        .HasForeignKey("AdditionalChargeId");

                    b.HasOne("Inventory.Core.Models.PurchaseOrder.PurchaseOrders", "PurchaseOrders")
                        .WithMany()
                        .HasForeignKey("PurchaseOrdersId");

                    b.HasOne("Inventory.Core.Models.Commons.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("TaxId");
                });

            modelBuilder.Entity("Inventory.Core.Models.PurchaseOrder.PurchaseOrderAdditionalChargeForProduct", b =>
                {
                    b.HasOne("Inventory.Core.Models.Commons.AdditionalCharge", "AdditionalCharge")
                        .WithMany()
                        .HasForeignKey("AdditionalChargeId");

                    b.HasOne("Inventory.Core.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Inventory.Core.Models.PurchaseOrder.PurchaseOrders", "PurchaseOrders")
                        .WithMany()
                        .HasForeignKey("PurchaseOrdersId");

                    b.HasOne("Inventory.Core.Models.Commons.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("TaxId");
                });

            modelBuilder.Entity("Inventory.Core.Models.PurchaseOrder.PurchaseOrderDetails", b =>
                {
                    b.HasOne("Inventory.Core.Models.PurchaseOrder.PurchaseOrders", "PurchaseOrders")
                        .WithMany()
                        .HasForeignKey("PurchaseOrdersId");
                });

            modelBuilder.Entity("Inventory.Core.Models.PurchaseOrder.PurchaseOrderItems", b =>
                {
                    b.HasOne("Inventory.Core.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Inventory.Core.Models.PurchaseOrder.PurchaseOrders", "PurchaseOrders")
                        .WithMany()
                        .HasForeignKey("PurchaseOrdersId");

                    b.HasOne("Inventory.Core.Models.Commons.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("TaxId");
                });

            modelBuilder.Entity("Inventory.Core.Models.PurchaseOrder.PurchaseOrders", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.Commons.CreditTerms", "CreditTerms")
                        .WithMany()
                        .HasForeignKey("CreditTermId");

                    b.HasOne("Inventory.Core.Models.Currency.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Commons.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Core.Models.Commons.ShipmentMethod", "ShipmentMethod")
                        .WithMany()
                        .HasForeignKey("ShipmentMethodId");

                    b.HasOne("Inventory.Core.Models.Supplier.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.RawMaterails", b =>
                {
                    b.HasOne("Inventory.Core.Models.Products.ProductBrand", "ProductBrand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.Commons.Metric_Units", "metric_Units4")
                        .WithMany()
                        .HasForeignKey("ID_metric_Units");

                    b.HasOne("Inventory.Core.Models.Commons.Metric_Units", "metric_Units2")
                        .WithMany()
                        .HasForeignKey("Inner_Weight_metric_Units");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Commons.Metric_Units", "metric_Units3")
                        .WithMany()
                        .HasForeignKey("OD_metric_Units");

                    b.HasOne("Inventory.Core.Models.Commons.Metric_Units", "metric_Units1")
                        .WithMany()
                        .HasForeignKey("Outer_Weight_metric_Units");

                    b.HasOne("Inventory.Core.Models.Products.ProductCategories", "productCategories")
                        .WithMany()
                        .HasForeignKey("ProductCategorieId");

                    b.HasOne("Inventory.Core.Models.Supplier.Supplier", "supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.HasOne("Inventory.Core.Models.Commons.TaxCode", "taxCode")
                        .WithMany()
                        .HasForeignKey("TaxCodeId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");

                    b.HasOne("Inventory.Core.Models.Commons.UOM", "UOM")
                        .WithMany()
                        .HasForeignKey("UOMId");

                    b.HasOne("Inventory.Core.Models.Commons.Warehouse", "warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Inventory.Core.Models.SalesOrder.SalesOrderAdditionalChargeForAll", b =>
                {
                    b.HasOne("Inventory.Core.Models.Commons.AdditionalCharge", "AdditionalCharge")
                        .WithMany()
                        .HasForeignKey("AdditionalChargeId");

                    b.HasOne("Inventory.Core.Models.SalesOrder.SalesOrders", "SalesOrders")
                        .WithMany()
                        .HasForeignKey("SalesOrdersId");

                    b.HasOne("Inventory.Core.Models.Commons.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("TaxId");
                });

            modelBuilder.Entity("Inventory.Core.Models.SalesOrder.SalesOrderAdditionalChargeForProduct", b =>
                {
                    b.HasOne("Inventory.Core.Models.Commons.AdditionalCharge", "AdditionalCharge")
                        .WithMany()
                        .HasForeignKey("AdditionalChargeId");

                    b.HasOne("Inventory.Core.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Inventory.Core.Models.SalesOrder.SalesOrders", "SalesOrders")
                        .WithMany()
                        .HasForeignKey("SalesOrdersId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Core.Models.Commons.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("TaxId");
                });

            modelBuilder.Entity("Inventory.Core.Models.SalesOrder.SalesOrderDetails", b =>
                {
                    b.HasOne("Inventory.Core.Models.SalesOrder.SalesOrders", "SalesOrders")
                        .WithMany()
                        .HasForeignKey("SalesOrdersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Core.Models.SalesOrder.SalesOrderItems", b =>
                {
                    b.HasOne("Inventory.Core.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Inventory.Core.Models.SalesOrder.SalesOrders", "SalesOrders")
                        .WithMany()
                        .HasForeignKey("SalesOrdersId");

                    b.HasOne("Inventory.Core.Models.Commons.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("TaxId");
                });

            modelBuilder.Entity("Inventory.Core.Models.SalesOrder.SalesOrders", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.Commons.CreditTerms", "CreditTerms")
                        .WithMany()
                        .HasForeignKey("CreditTermId");

                    b.HasOne("Inventory.Core.Models.Currency.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Inventory.Core.Models.Customer.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Commons.SalesOrderType", "SalesOrderType")
                        .WithMany()
                        .HasForeignKey("SalesOrderTypeId");

                    b.HasOne("Inventory.Core.Models.Commons.ShipmentMethod", "ShipmentMethod")
                        .WithMany()
                        .HasForeignKey("ShipmentMethodId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.Supplier.Supplier", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.Currency.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("DefaultCurrency");

                    b.HasOne("Inventory.Core.Models.Commons.PaymentTerm", "paymentTerm")
                        .WithMany()
                        .HasForeignKey("DefaultPaymentTerms");

                    b.HasOne("Inventory.Core.Models.Commons.TaxCode", "TaxCode")
                        .WithMany()
                        .HasForeignKey("DefaultTaxCode");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.Commons.ShipmentMethod", "ShipmentMethod")
                        .WithMany()
                        .HasForeignKey("Shipmenmethod");

                    b.HasOne("Inventory.Core.Models.Commons.ShipmentTerm", "ShipmentTerm")
                        .WithMany()
                        .HasForeignKey("Shipmenterms");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Inventory.Core.Models.UploadImage.UploadImage", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "UserId")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("Inventory.Core.Models.RawMaterails", "RawMaterails")
                        .WithMany()
                        .HasForeignKey("RawMaterailId");

                    b.HasOne("Inventory.Core.Models.Tenants.Tenants", "Tenants")
                        .WithMany()
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId1");
                });

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationUserClaim", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationUserLogin", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationUserRole", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Inventory.Core.Models.ApplicationUser.ApplicationUserToken", b =>
                {
                    b.HasOne("Inventory.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
